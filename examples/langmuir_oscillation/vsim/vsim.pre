#######################################################
#
# This PRE file,
#   vsim.pre,
# was generated from the simulation definition file,
#   vsim.sdf,
# by the VSim 10.1.0 build 35370 translator.
# Any changes to this file will be lost if the
# translator is rerun.
#
#######################################################

#######################################################
# User defined constants and parameters
#######################################################

$ import verbosity
$ import mathphys

$ N_X = 3.20000000000000e+01
$ W_X = 1.00000000000000e+00
$ W_Y = 1.00000000000000e-01
$ TOTAL_PARTICLES = 3.20000000000000e+02
$ PPM = 1.00000000000000e+13
$ NEUTQ = (ELEMCHARGE*PPM*TOTAL_PARTICLES/W_X)

#######################################################
# Simulation definition from the basic settings
#######################################################
$ VPMW_DIELECTRIC_SHAPE_NAME_ARRAY = "" 
$ VPMW_DIELECTRIC_SHAPE_BOUNDARY_NAME_ARRAY = "" 
$ VPMW_DIELECTRIC_SHAPE_MATERIAL_ARRAY = "" 
$ VPMW_PERMITTIVITIES_DICT = "" 

$ VPMW_COORDINATE_SYSTEM = "cartesian"
# cylindrical not found.
$ VPMW_GRID_SPACING = "uniform"
$ VPMW_NDIM = "1"
$ VPMW_PRECISION = "double"
$ VPMW_USE_GPU = "False"
# electromagnetic not found.
$ VPMW_SIMULATION_TYPE = "electrostatic"
# magnetostatic not found.
# no field solver not found.
# prescribed fields not found.
# electromagnetic.background permittivity not found.
# electromagnetic.dielectric solver not found.
$ VPMW_INCLUDE_PARTICLES = "True"
$ VPMW_MAX_ELECTRON_DENSITY = "0.0"
# estimated min electron temperature (eV) not found.
$ VPMW_MAX_ELECTRON_TEMP_EV = "0.0"
$ VPMW_DUMP_NODAL_FIELDS = "True"
$ VPMW_COLLISIONS_FRAMEWORK = "reduced"
# monte carlo not found.
# reactions not found.
# reactions.collision order not found.
$ VPMW_RESTORE_GRID_BNDRY = "True"
$ VPMW_DECOMP = "default"
$ VPM_PEC_NORMAL_INTERIOR = solid
$ VPMW_TOP_LEVEL_VERBOSITY = VPM_DEBUG3
$ VPMW_GRID_TYPE = UniformCartesian

#######################################################
# Import needed system macros
#######################################################

$ import VSim

#######################################################
# User defined functions
#######################################################


#######################################################
# User defined space-time functions
#######################################################

$ velocityFunction = (gauss(ELEC_THERM_VEL_1D,0.0))

#######################################################
#
# Ordered blocks
#
#######################################################

#######################################################
# Translation of the grid
#######################################################

$ VPMW_NUM_GUARD_CELLS = 1
$ VPMW_NUM_GUARD_CELLSP1 = 2
$ VPMW_BGN0 = 0.00000000000000e+00
$ VPMW_BGN1 = 0.00000000000000e+00

$ VPMW_L0 = W_X - 0.0
$ VPMW_L1 = W_Y - 0.0

$ VPMW_N0 = int(N_X)

# Derived grid variables.  Here for partial processing
$ VPMW_UB0P1 = VPMW_N0 + 1
$ VPMW_UB1P1 = VPMW_N1 + 1
$ VPMW_UB2P1 = VPMW_N2 + 1
$ VPMW_END0 = VPMW_BGN0 + VPMW_L0
$ VPMW_END1 = VPMW_BGN1 + VPMW_L1
$ VPMW_END2 = VPMW_BGN2 + VPMW_L2
# Average cell sizes
$ VPMW_DL0 = VPMW_L0/VPMW_N0
$ VPMW_DL1 = VPMW_L1/VPMW_N1
$ VPMW_DL2 = VPMW_L2/VPMW_N2
$ VPMW_DLI0 = 1./VPMW_DL0
$ VPMW_DLI1 = 1./VPMW_DL1
$ VPMW_DLI2 = 1./VPMW_DL2
$ VPMW_DLISQ = VPMW_DLI0**2 + (VPMW_NDIM>1)*VPMW_DLI1**2 + (VPMW_NDIM>2)*VPMW_DLI2**2
$ VPMW_DLI = math.sqrt(VPMW_DLISQ)

$ VPMW_PERIODIC_DIRS = [0, 1, 2]

# Requires VPMW_N0[1,2], VPMW_L0[1,2], VPMW_BGN0[1,2]
#
# For UniformCartesian, defines:
#     VPM_NX, VPM_NY, VPM_NZ, VPM_LX, VPM_LY, VPM_LZ,
#     VPM_BGNX, VPM_BGNY, VPM_BGNZ,
#     VPM_ENDX, VPM_ENDY, VPM_ENDZ,
#     VPM_NXP1, VPM_NYP1, VPM_NZP1,
#     VPM_NXM1, VPM_NYM1, VPM_NZM1,
#     VPM_DX, VPM_DY, VPM_DZ,
#     VPM_DXI, VPM_DYI, VPM_DZI,
#     VPM_DL, VPM_DLI
# For Cylindrical, defines:
#     VPM_NZ, VPM_NR, VPM_NPHI, VPM_LZ, VPM_LR, VPM_LPHI,
#     VPM_BGNR, VPM_BGNR, VPM_BGNPHI,
#     VPM_ENDZ, VPM_ENDR, VPM_ENDPHI,
#     VPM_NZP1, VPM_NRP1, VPM_NPHIP1,
#     VPM_NZM1, VPM_NRM1, VPM_NPHIM1,
#     VPM_DZ, VPM_DR, VPM_DPHI,
#     VPM_DZI, VPM_DRI, VPM_DPHII,
#     VPM_DL, VPM_DLI
setGridData()


#######################################################
# Translation of the time group
#######################################################

$ VPMW_DMFRAC = "0.5"
$ VPMW_CFL_NUMBER = "0.1"
$ VPMW_DT = "1e-10"
$ VPMW_NSTEPS = 10000
$ VPMW_DUMP_PERIOD = 100
$ VPMW_DUMP_GROUP_SIZE = "1"

# Requires VPMW_SIMULATION_TYPE
# For Electromagnetic:
#   if VPMW_DT not defined
#     Requires LIGHTSPEED, DLI
#     Will calculate VPMW_DT based on CFL
# For Electrostatic:
#   Requires VPMW_MAX_ELECTRON_DENSITY, VPMW_MAX_ELECTRON_TEMP_EV
setTimingData()

#######################################################
#
# Unordered blocks
#
#######################################################

#######################################################
# Translation of Fields
#######################################################

addBackgroundChargeDensity(backgroundChargeDensity0, NEUTQ)

#######################################################
# Translation of Solver
#######################################################

addBaseSolver(gmres, 30, classic)
addPreconditioner(none)
# This writes preconditioner, so it must be last.
addPoissonSolver(1.0, 200, 1.00000000000000e-08, r0)

#######################################################
# Translation of Particles
#######################################################

addParticleSpeciesLoaderFromFile(fileParticleLoader0, electrons, ../particles.dat, [ 0.0, 0.0, 0.0], 0, 1.0)
addParticleSpecies(electrons, nonRelBoris, 0.0, constantWeights, explicitlySetWeights, PPM)
addNodalExtrapNeed()

#######################################################
# Translation of Histories
#######################################################

addParticleEnergyHistory(electronEnergy, electrons)
addElectricFieldEnergyHistory(electricFieldEnergy, simulationRegion)

#######################################################
#
# Finalize
#
#######################################################

finalize()

